/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FrameLogin.java
 *
 * Created on Sep 8, 2013, 9:33:17 AM
 */
package login;
import java.sql.*;
import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import javax.sql.*;
import net.proteanit.sql.DbUtils;
import java.awt.event.KeyEvent.*;

/**
 *
 * @author robbie
 */
public class FrameLogin extends javax.swing.JFrame {

    static boolean getConnect = false;
    static Connection con = null;
    
    /** Creates new form FrameLogin */
    public FrameLogin() {
        initComponents();
    }
    
    public void hideTextField(){
        manualInput.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        manualIn = new javax.swing.JButton();
        manualOut = new javax.swing.JButton();
        manualInput = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        PeopleLoggedIn = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        editButton = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jButton1.setText("jButton1");

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Please Login:");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        manualIn.setText("Manually Check In");
        manualIn.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        manualIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualInActionPerformed(evt);
            }
        });

        manualOut.setText("Manually Check Out");
        manualOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualOutActionPerformed(evt);
            }
        });

        manualInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                manualInputFocusGained(evt);
            }
        });
        manualInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                manualInputKeyTyped(evt);
            }
        });

        PeopleLoggedIn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(PeopleLoggedIn);

        jLabel1.setText("Input Id Below");

        editButton.setText("Edit Your Information");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(manualIn, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(manualOut, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(manualInput, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(manualInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(manualIn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(manualOut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(editButton)))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private void manualInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualInActionPerformed
    String strId = manualInput.getText();
    if (isId(strId)) {
        int id = getId();
        if (isIdFound(id)) {
            int personId = getPersonId(id);
            if (!isLoggedIn(id)) {
                logIn(personId);
                manualInput.setText("");
            } else {
                MessageBox.infoBox("Error: Already Logged In", "Error");
            }
        }
    }
}//GEN-LAST:event_manualInActionPerformed

private void manualOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualOutActionPerformed
    String strId = manualInput.getText();
    if (isId(strId)) {
        int id = getId();
        if (isIdFound(id)) {
            int personId = getPersonId(id);
            if (!isLoggedIn(id)) {
                MessageBox.infoBox("Error: Already Logged In", "Error");
            } else {
                logOut(personId);
                manualInput.setText("");
            }
        }
    }
}//GEN-LAST:event_manualOutActionPerformed

private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
// TODO add your handling code here:
    Update_table();
}//GEN-LAST:event_formWindowOpened

private void manualInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_manualInputKeyTyped
// TODO add your handling code here:
    String strId = manualInput.getText();
    //System.out.println(evt.getKeyCode());
    if (evt.getKeyChar() == '\n') {
        if (isId(strId)) {
            int id = getId();
            if (isIdFound(id)) {
                int personId = getPersonId(id);
                if (!isLoggedIn(id)) {
                    logIn(personId);
                    manualInput.setText("");
                } else {
                    logOut(personId);
                    manualInput.setText("");
                }
            }
        }
    }
}//GEN-LAST:event_manualInputKeyTyped

private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
// TODO add your handling code here:
    
}//GEN-LAST:event_formWindowClosed

private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
// TODO add your handling code here:
    Connection con = getConnect();
    try {
        //con.close();
    } catch (Exception err) {
        MessageBox.infoBox(err.toString(), "Error closing connection in formWindowClosed");
    }
}//GEN-LAST:event_formWindowClosing

private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
// TODO add your handling code here:
    System.out.println("hi");
}//GEN-LAST:event_formFocusGained

private void manualInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_manualInputFocusGained
// TODO add your handling code here:
    Update_table();
}//GEN-LAST:event_manualInputFocusGained

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:
        JFrame EditUserQuery = new EditUserQuery();
        EditUserQuery.setVisible(true);
    }//GEN-LAST:event_editButtonActionPerformed

private void Update_table() {
    try {
        Connection conn = getConnect();
        String sql = "SELECT * FROM LoggedInPeople";
        PreparedStatement pst = conn.prepareStatement(sql);
        ResultSet rs = pst.executeQuery();
        PeopleLoggedIn.setModel(DbUtils.resultSetToTableModel(rs));
        closeConnect();
    } catch (Exception e) {
        System.out.println(e);
    }
}

public static boolean isId(String id) {
    boolean isInt = true;
    try {
        Integer.parseInt(id);
    } catch (Error er) {
        isInt = false;
        MessageBox.infoBox("Error: ID incorrect", "Error");
    }
    return isInt;
}

public int getId() {
    int intId = Integer.parseInt(manualInput.getText());
    return intId;
}

public static Connection getConnect() {
    try {
        /*if (!getConnect) {
            if (!con.isValid(1)) {*/
                String host = "jdbc:mysql://localhost:3306/2761DB";
                String uname = "root";
                String upassword = "ironhorseadmin";
                con = DriverManager.getConnection(host, uname, upassword );
                getConnect = true;
            /*}
        }*/
    } catch (SQLException err) {
        System.out.println( err.getMessage( ) );
    }
    return con;
}

public static void closeConnect() {
    try {
        con.close();
    } catch (SQLException e) {
        MessageBox.infoBox(e.toString(),"Error in closeConnect");
    }
}

public static boolean isIdFound(int id) {
    Connection con = getConnect();
    boolean isFound = false;
    try {
        String SQL = "SELECT PersonId, FirstName, LastName, SchoolId FROM 2761DB.Persons WHERE SchoolId = " + id;
        Statement stmt = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
        ResultSet rs = stmt.executeQuery(SQL);
        if (rs.first()) {
            isFound = true;
        } else {
            AddUserQuery addUser = new AddUserQuery(); 
            addUser.setVisible(true);
        }
    } catch (SQLException err) {
        System.out.println(err);
        MessageBox.infoBox(err.toString(), "Error");
    }
    closeConnect();
    return isFound;
}

public static int getPersonId (int id) {
    Connection con = getConnect();
    ResultSet rs = null;
    int personId = 0;
    try {
        String SQL = "SELECT PersonId FROM 2761DB.Persons WHERE SchoolId = " + id;
        Statement stmt = con.createStatement();
        rs = stmt.executeQuery(SQL);
        if (rs.next()) {
            rs.first();
            personId = rs.getInt("PersonId");
        } else {
            AddUserQuery addUserQuery = new AddUserQuery(); 
            addUserQuery.setVisible(true);
        }
    } catch (Exception err) {
        MessageBox.infoBox(err.toString(), "Error in getPersonId");
    }
    closeConnect();
    return personId;
}

private boolean isLoggedIn (int id) {
    boolean isLoggedIn = false;
    Connection con = getConnect();
    int personId = getPersonId(id);
    try {
        String SQL = "SELECT * FROM LogInOut WHERE personId = " + personId + " AND TimeOut IS NULL";
        Statement stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery(SQL);
        if (rs != null && rs.next()) {
            rs.last();
            isLoggedIn = true;
        }
    } catch (Exception err) {
        MessageBox.infoBox(err.toString(), "Error from isLoggedIn");
        System.out.println(err);
    }
    closeConnect();
    return isLoggedIn;
    //SELECT * FROM LogInOut WHERE personId = 1 AND TimeOut IS NULL
}

private void logIn (int personId) {
    Connection con = getConnect();
    try {
        //MessageBox.infoBox("You have successfully logged in", "Login");
        //INSERT INTO LogInOut (PersonId, TimeIn) VALUES (1, NOW())
        String SQLLogin = "INSERT INTO LogInOut (PersonId, TimeIn) VALUES (" + personId + ", NOW())";
        Statement stmtLogin = con.createStatement(); 
        stmtLogin.executeUpdate(SQLLogin);
        Update_table();
    } catch (SQLException err) {
        MessageBox.infoBox(err.toString(), "Error");
    }
    closeConnect();
}

private void logOut (int personId) {
    Connection con = getConnect();
    try {
        //MessageBox.infoBox("You have successfully logged out", "Logout");
        //UPDATE LogInOut SET TimeOut = NOW() WHERE PersonId = 1 AND TimeOut IS NULL
        String SQLLogin = "UPDATE LogInOut SET TimeOut = NOW() WHERE PersonId = " + personId + " AND TimeOut IS NULL";
        Statement stmtLogin = con.createStatement(); 
        stmtLogin.executeUpdate(SQLLogin);
        Update_table();
    } catch (SQLException err) {
        System.out.println(err);
        MessageBox.infoBox(err.toString(), "Error");
    }
    closeConnect();
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /*try {
            String host = "jdbc:mysql://localhost:3306/2761DB";
            String uname = "root";
            String upassword = "j.a.b";
            Connection con = DriverManager.getConnection(host, uname, upassword );
            String SQL = "SELECT * FROM Persons";
            Statement stmt = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = stmt.executeQuery( SQL );
            while(rs.next()){
                String firstName = rs.getString("FirstName");
                String lastName = rs.getString("LastName");
                int personId = rs.getInt("PersonId");
                String firstName = rs.getString("FirstName");
                String lastName = rs.getString("LastName");
                int cellPhone = rs.getInt("CellPhoneNo");
                int homePhone = rs.getInt("HomePhoneNo");
                int schoolId = rs.getInt("SchoolId");
                int grade = rs.getInt("Grad"
                        + "e");
                System.out.println(personId + " " + firstName + " " + lastName + " " + cellPhone + " " + homePhone + " " + schoolId + " " + grade);
            }
        } catch (SQLException err) {
            System.out.println( err.getMessage( ) );
        }*/
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame FrameLogin = new FrameLogin();
                //FrameLogin.setExtendedState(JFrame.MAXIMIZED_BOTH);
                FrameLogin.setVisible(true);
            }
        });
       
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable PeopleLoggedIn;
    private javax.swing.JButton editButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton manualIn;
    private javax.swing.JTextField manualInput;
    private javax.swing.JButton manualOut;
    // End of variables declaration//GEN-END:variables

}